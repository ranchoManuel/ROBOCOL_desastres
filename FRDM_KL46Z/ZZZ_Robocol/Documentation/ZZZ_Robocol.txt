=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "Acelerometro" (component MMA8451Q)
   - Acelerometro_Enable -Enables the device with setting the ACTIVE bit in the CTRL register 1
   - Acelerometro_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - Acelerometro_isEnabled -Returns the status of the the ACTIVE bit in the CTRL register 1
   - Acelerometro_SwReset -Perform a software reset using the rst bit in the CTRL register 2
   - Acelerometro_ReadReg8 -Reads an 8bit device register
   - Acelerometro_WriteReg8 -Write an 8bit device register
   - Acelerometro_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, 
                negative for negative acceleration and positive for positive acceleration).
   - Acelerometro_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, 
                negative for negative acceleration and positive for positive acceleration).
   - Acelerometro_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, 
                negative for negative acceleration and positive for positive acceleration).
   - Acelerometro_GetRaw8XYZ -Returns in an array the x, y and z accelerometer as 8bit values.
   - Acelerometro_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the 
                X sensor has 1 g.
   - Acelerometro_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the 
                Y sensor has 1 g.
   - Acelerometro_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the 
                Z sensor has 1 g.
   - Acelerometro_GetXmg -Returns the X value in mg
   - Acelerometro_GetYmg -Returns the Y value in mg
   - Acelerometro_GetZmg -Returns the Z value in mg
   - Acelerometro_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - Acelerometro_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - Acelerometro_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - Acelerometro_GetXOffset -Returns the offset applied to the X value.
   - Acelerometro_GetYOffset -Returns the offset applied to the Y value.
   - Acelerometro_GetZOffset -Returns the offset applied to the Z value.
   - Acelerometro_GetX1gValue -Returns the value for 1g for channel  X.
   - Acelerometro_GetY1gValue -Returns the value for 1g for channel  Y.
   - Acelerometro_GetZ1gValue -Returns the value for 1g for channel  Z.
   - Acelerometro_SetFastMode -Turns the F_READ (Fast Read Mode) on or off
   - Acelerometro_WhoAmI -Returns the value of the WHO_AM_I (0x0D) register
   - Acelerometro_Init -Initializes the device driver
   - Acelerometro_Deinit -Counterpart to Init() method.

Module "ADCs"      (component ADC)
   - ADCs_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADCs_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - ADCs_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.
   - ADCs_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADCs_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.

Module "RingBuffer" (component RingBufferUInt8)
   - RingBuffer_Put -Puts a new element into the buffer
   - RingBuffer_Get -Removes an element from the buffer
   - RingBuffer_NofElements -Returns the actual number of elements in the buffer.
   - RingBuffer_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - RingBuffer_Init -Initializes the data structure

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Init -Initializes the driver.

Module "ComGalileo" (component Serial_LDD)
   - ComGalileo_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - ComGalileo_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission.
   - ComGalileo_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number 
                of characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If 
                a receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU2_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU2_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU2_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU2_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "Oruga1BackwardPWM" (component PWM)
   - Oruga1BackwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Oruga1BackwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "BrazoFrontalForwardPWM" (component PWM)
   - BrazoFrontalForwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned 
                integer number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not 
                selected list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the 
                timer possibilities and on the selected period.
   - BrazoFrontalForwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "TU3"       (component TimerUnit_LDD)
   - TU3_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU3_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU3_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU3_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU3_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU3_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "Oruga1ForwardPWM" (component PWM)
   - Oruga1ForwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Oruga1ForwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "Oruga2BackwardPWM" (component PWM)
   - Oruga2BackwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Oruga2BackwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "BrazoPostForwardPWM" (component PWM)
   - BrazoPostForwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - BrazoPostForwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "Oruga2ForwardPWM" (component PWM)
   - Oruga2ForwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Oruga2ForwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "BrazoFrontalBackwardPWM" (component PWM)
   - BrazoFrontalBackwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned 
                integer number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not 
                selected list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the 
                timer possibilities and on the selected period.
   - BrazoFrontalBackwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "BrazoPostBackwardPWM" (component PWM)
   - BrazoPostBackwardPWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - BrazoPostBackwardPWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.

Module "BateriaInput" (component BitsIO)
   - BateriaInput_GetDir -Return selected direction.
   - BateriaInput_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input 
                value of the pins and returns it. If the direction is [output] then returns the last written value (see <Safe 
                mode> property for limitations).
   - BateriaInput_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value 
                to a memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BateriaInput_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] 
                then it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - BateriaInput_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BateriaInput_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BateriaInput_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, 
                FALSE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BateriaInput_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "Luz"       (component BitIO)
   - Luz_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Luz_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Luz_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Luz_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - Luz_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "Buzzer"    (component BitIO)
   - Buzzer_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Buzzer_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Buzzer_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - Buzzer_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - Buzzer_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "Rng1Gal"   (component RingBufferUInt8)
   - Rng1Gal_Put -Puts a new element into the buffer
   - Rng1Gal_Get -Removes an element from the buffer
   - Rng1Gal_NofElements -Returns the actual number of elements in the buffer.
   - Rng1Gal_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - Rng1Gal_Init -Initializes the data structure

Module "AS1"       (component Serial_LDD)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception.

Module "MAG1"      (component MAG3110)
   - MAG1_Enable -Enables the device with setting the ACTIVE bit in the CTRL register 1
   - MAG1_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - MAG1_GetXYZ8 -Returns in an array the x, y and z sensor values as 8bit values. Note that for this method the FAST_READ 
                flag *shall* be set.
   - MAG1_GetX -Returns the X magnetometer value.
   - MAG1_GetY -Returns the Y magnetometer value.
   - MAG1_GetZ -Returns the Z magnetometer value.
   - MAG1_SetFastReadMode -Turns the FR (Fast Read Mode) bit in CTRL_REG_1 on or off
   - MAG1_GetFastReadMode -Returns the FR (Fast Read Mode) status in the CTRL_REG_1 register
   - MAG1_GetTemperature -Returns the temperature of the die as signed 8bit values in degree Celsius
   - MAG1_GetSysMode -Returns the SYSMOD (0x08) status
   - MAG1_SetSysMode -Sets the SYSMOD (0x08) status register
   - MAG1_WriteReg -Writes to a device register address
   - MAG1_ReadReg -Reads from a device register address
   - MAG1_MagneticSensorReset -Initiates a magnetic sensor reset cycle that will restore correct operation after exposure to an 
                excessive magnetic field which exceeds the Full Scale Range but is less than the Maximum Applied Magnetic Field.
   - MAG1_Init -Initializes the device driver
   - MAG1_Deinit -Counterpart to Init() method.

Module "Cpu"       (component MKL46Z256LL4)

===================================================================================
