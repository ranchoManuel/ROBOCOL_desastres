/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : MAG1.h
**     CDE edition : Standard
**     Project     : ZZZ_Robocol
**     Processor   : MKL46Z256VLL4
**     Component   : MAG3110
**     Version     : Component 01.010, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-06-12, 18:39, # CodeGen: 34
**     Abstract    :
**         Implements a driver for the MAG3110 Magnetometer from Freescale
**     Settings    :
**          Component Name                                 : MAG1
**          Slave Address                                  : 0E
**          I2C Bus                                        : GI2C1
**          Shell                                          : Disabled
**     Contents    :
**         Enable              - byte MAG1_Enable(void);
**         Disable             - byte MAG1_Disable(void);
**         GetXYZ8             - uint8_t MAG1_GetXYZ8(signed char *xyz);
**         GetX                - byte MAG1_GetX(int16_t *value);
**         GetY                - byte MAG1_GetY(int16_t *value);
**         GetZ                - byte MAG1_GetZ(int16_t *value);
**         SetFastReadMode     - byte MAG1_SetFastReadMode(bool on);
**         GetFastReadMode     - byte MAG1_GetFastReadMode(bool *isOn);
**         GetTemperature      - byte MAG1_GetTemperature(signed char *temperature);
**         GetSysMode          - byte MAG1_GetSysMode(byte *mode);
**         SetSysMode          - byte MAG1_SetSysMode(byte mode);
**         WriteReg            - byte MAG1_WriteReg(byte reg, byte val);
**         ReadReg             - byte MAG1_ReadReg(byte addr, byte *val);
**         MagneticSensorReset - byte MAG1_MagneticSensorReset(void);
**         Init                - uint8_t MAG1_Init(void);
**         Deinit              - uint8_t MAG1_Deinit(void);
**
**     License : Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2013, all rights reserved.
**     http://www.mcuoneclipse.com
**     This an open source software in the form of a Processor Expert Embedded Component.
**     This is a free software and is opened for education, research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file MAG1.h
** @version 01.00
** @brief
**         Implements a driver for the MAG3110 Magnetometer from Freescale
*/         
/*!
**  @addtogroup MAG1_module MAG1 module documentation
**  @{
*/         

#ifndef __MAG1_H
#define __MAG1_H

/* MODULE MAG1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */
#include "GI2C1.h"

#include "Cpu.h"


#define MAG1_PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */

/* data ready register */
#define MAG1_DR_STATUS 0x00 /* data ready status register address */
#define MAG1_DR_STATUS_ZYXOW_BIT_MASK   (1<<7) /* X, Y, Z-axis data overwrite */
#define MAG1_DR_STATUS_ZOW_BIT_MASK     (1<<6) /* Z-axis data overwrite */
#define MAG1_DR_STATUS_YOW_BIT_MASK     (1<<5) /* Y-axis data overwrite */
#define MAG1_DR_STATUS_XOW_BIT_MASK     (1<<4) /* X-axis data overwrite */
#define MAG1_DR_STATUS_ZXYDR_BIT_MASK   (1<<3) /* X or Y or Z-axis new data ready */
#define MAG1_DR_STATUS_ZDR_BIT_MASK     (1<<2) /* Z-axis new data ready */
#define MAG1_DR_STATUS_YDR_BIT_MASK     (1<<1) /* >-axis new data ready */
#define MAG1_DR_STATUS_XDR_BIT_MASK     (1<<0) /* X-axis new data ready */

/* data registers */
#define MAG1_OUT_X_MSB 0x01 /* X output MSB address */
#define MAG1_OUT_X_LSB 0x02 /* X output LSB address */
#define MAG1_OUT_Y_MSB 0x03 /* Y output MSB address */
#define MAG1_OUT_Y_LSB 0x04 /* Y output LSB address */
#define MAG1_OUT_Z_MSB 0x05 /* Z output MSB address */
#define MAG1_OUT_Z_LSB 0x06 /* Z output LSB address */

/* 'who am I' register */
#define MAG1_WHO_AM_I  0x07 /* device ID number */

/* system mode register */
#define MAG1_SYSMOD    0x08 /* current system mode register address */
#define MAG1_SYSMOD_STANDBY_BIT_MASK    0x00 /* standby mode */
#define MAG1_SYSMOD_ACTIVE_RAW_BIT_MASK 0x01 /* active, with raw data */
#define MAG1_SYSMOD_ACTIVE_BIT_MASK     0x02 /* active, with user corrected data */

/* offset registers */
#define MAG1_OFF_X_MSB 0x09 /* user offset X MSB register address */
#define MAG1_OFF_X_LSB 0x0A /* user offset X LSB register address */
#define MAG1_OFF_Y_MSB 0x0B /* user offset Y MSB register address */
#define MAG1_OFF_Y_LSB 0x0C /* user offset Y LSB register address */
#define MAG1_OFF_Z_MSB 0x0D /* user offset Z MSB register address */
#define MAG1_OFF_Z_LSB 0x0E /* user offset Z LSB register address */

/* die temperature (needs to add an offset as not factory trimmed) */
#define MAG1_DIE_TEMP  0x0F /* die temperature register, signed 8bit in C */

/* control register 1 */
#define MAG1_CTRL_REG_1 0x10 /* CTRL 1 register address */
#define MAG1_CTRL_REG_1_AC_BIT_MASK           0x01 /* active mode */
#define MAG1_CTRL_REG_1_TM_BIT_MASK           0x02 /* trigger immediate measurement */
#define MAG1_CTRL_REG_1_FR_BIT_MASK           0x04 /* fast read selection */

#define MAG1_CTRL_REG_1_OS_BITS_POS           (3)  /* bit position */
#define MAG1_CTRL_REG_1_OS_START              (16) /* value 0 below is starting with oversampling 16  */
#define MAG1_CTRL_REG_1_OS_16_BIT_MASK        (0x0<<MAG1_CTRL_REG_1_OS_BITS_POS) /* oversampling ration 16 */
#define MAG1_CTRL_REG_1_OS_32_BIT_MASK        (0x1<<MAG1_CTRL_REG_1_OS_BITS_POS) /* oversampling ration 32 */
#define MAG1_CTRL_REG_1_OS_64_BIT_MASK        (0x2<<MAG1_CTRL_REG_1_OS_BITS_POS) /* oversampling ration 64 */
#define MAG1_CTRL_REG_1_OS_128_BIT_MASK       (0x3<<MAG1_CTRL_REG_1_OS_BITS_POS) /* oversampling ration 128 */
#define MAG1_CTRL_REG_1_OS_FULL_BIT_MASK      (0x3<<MAG1_CTRL_REG_1_OS_BITS_POS) /* all bits set */

#define MAG1_CTRL_REG_1_DR_BITS_POS           (5)    /* bit position */
#define MAG1_CTRL_REG_1_DR_START              (1280) /* value 0 below is starting with 1280 Hz */
#define MAG1_CTRL_REG_1_DR_1280HZ_BIT_MASK    (0x0<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 1280 Hz */
#define MAG1_CTRL_REG_1_DR_640HZ_BIT_MASK     (0x1<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 640 Hz */
#define MAG1_CTRL_REG_1_DR_320HZ_BIT_MASK     (0x2<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 320 Hz */
#define MAG1_CTRL_REG_1_DR_160HZ_BIT_MASK     (0x3<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 160 Hz */
#define MAG1_CTRL_REG_1_DR_80HZ_BIT_MASK      (0x4<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 80 Hz */
#define MAG1_CTRL_REG_1_DR_40HZ_BIT_MASK      (0x5<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 40 Hz */
#define MAG1_CTRL_REG_1_DR_20HZ_BIT_MASK      (0x6<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 20 Hz */
#define MAG1_CTRL_REG_1_DR_10HZ_BIT_MASK      (0x7<<MAG1_CTRL_REG_1_DR_BITS_POS) /* ADC Rate 10 Hz */
#define MAG1_CTRL_REG_1_DR_FULL_BIT_MASK      (0x7<<MAG1_CTRL_REG_1_DR_BITS_POS) /* all bits set */

/* control register 2 */
#define MAG1_CTRL_REG_2 0x11 /* CTRL 2 register address */
#define MAG1_CTRL_REG_2_AUTO_MRST_EN_BIT_MASK  (1<<7) /* automatic magnetic sensor reset */
#define MAG1_CTRL_REG_2_RAW_BIT_MASK           (1<<5) /* raw mode  */
#define MAG1_CTRL_REG_2_MAG_RST_BIT_MASK       (1<<4) /* magnetic sensor reset (one-shot) */

#define MAG1_I2C_ADDR   (0x0E) /* I2C slave device address as set in the properties */



uint8_t MAG1_Deinit(void);
/*
** ===================================================================
**     Method      :  MAG1_Deinit (component MAG3110)
**     Description :
**         Counterpart to Init() method.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, ERR_OK if everything is ok.
** ===================================================================
*/

uint8_t MAG1_Init(void);
/*
** ===================================================================
**     Method      :  MAG1_Init (component MAG3110)
**     Description :
**         Initializes the device driver
**     Parameters  : None
**     Returns     :
**         ---             - Error code, ERR_OK if everything is ok.
** ===================================================================
*/

byte MAG1_GetX(int16_t *value);
/*
** ===================================================================
**     Method      :  MAG1_GetX (component MAG3110)
**     Description :
**         Returns the X magnetometer value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * value           - Pointer to where to store the value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_GetY(int16_t *value);
/*
** ===================================================================
**     Method      :  MAG1_GetY (component MAG3110)
**     Description :
**         Returns the Y magnetometer value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * value           - Pointer to where to store the value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_GetZ(int16_t *value);
/*
** ===================================================================
**     Method      :  MAG1_GetZ (component MAG3110)
**     Description :
**         Returns the Z magnetometer value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * value           - Pointer to where to store the value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_SetFastReadMode(bool on);
/*
** ===================================================================
**     Method      :  MAG1_SetFastReadMode (component MAG3110)
**     Description :
**         Turns the FR (Fast Read Mode) bit in CTRL_REG_1 on or off
**     Parameters  :
**         NAME            - DESCRIPTION
**         on              - if to turn the FR mode on or off
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_Enable(void);
/*
** ===================================================================
**     Method      :  MAG1_Enable (component MAG3110)
**     Description :
**         Enables the device with setting the ACTIVE bit in the CTRL
**         register 1
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_Disable(void);
/*
** ===================================================================
**     Method      :  MAG1_Disable (component MAG3110)
**     Description :
**         Disables the device with clearing the ACTIVE bit in the CTRL
**         register 1
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_GetTemperature(signed char *temperature);
/*
** ===================================================================
**     Method      :  MAG1_GetTemperature (component MAG3110)
**     Description :
**         Returns the temperature of the die as signed 8bit values in
**         degree Celsius
**     Parameters  :
**         NAME            - DESCRIPTION
**       * temperature     - Pointer to variable where
**                           to store the temperature
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_GetSysMode(byte *mode);
/*
** ===================================================================
**     Method      :  MAG1_GetSysMode (component MAG3110)
**     Description :
**         Returns the SYSMOD (0x08) status
**     Parameters  :
**         NAME            - DESCRIPTION
**       * mode            - Pointer to where to store the value.
**                           Returns 0x00 (STANDBY), 0x01 (ACTIVE, raw
**                           data) or 0x02 (ACTIVE, non-RAW data)
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_Write16bitBEValue(byte addr, word value);
/*
** ===================================================================
**     Method      :  MAG1_Write16bitBEValue (component MAG3110)
**
**     Description :
**         Writes a 16bit value to the device. Value is written in Big 
**         Endian.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte MAG1_Read16bitBEValue(byte addr, word *value);
/*
** ===================================================================
**     Method      :  MAG1_Read16bitBEValue (component MAG3110)
**
**     Description :
**         Reads a 16bit value to the device. Value is read in Big Endian 
**         and returned in the proper format depending of LE/BE of 
**         microcontroller.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte MAG1_WriteReg(byte reg, byte val);
/*
** ===================================================================
**     Method      :  MAG1_WriteReg (component MAG3110)
**     Description :
**         Writes to a device register address
**     Parameters  :
**         NAME            - DESCRIPTION
**         reg             - register address
**         val             - Value to write
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_ReadReg(byte addr, byte *val);
/*
** ===================================================================
**     Method      :  MAG1_ReadReg (component MAG3110)
**     Description :
**         Reads from a device register address
**     Parameters  :
**         NAME            - DESCRIPTION
**         addr            - Device register address
**       * val             - Pointer to where to store the value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_SetSysMode(byte mode);
/*
** ===================================================================
**     Method      :  MAG1_SetSysMode (component MAG3110)
**     Description :
**         Sets the SYSMOD (0x08) status register
**     Parameters  :
**         NAME            - DESCRIPTION
**         mode            - Set the system mode. 0x00
**                           (SYSMOD_STANDBY_BIT_MASK), 0x01
**                           (SYSMOD_ACTIVE_RAW_BIT_MASK) or 0x02
**                           (SYSMOD_ACTIVE_BIT_MASK)
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t MAG1_GetXYZ8(signed char *xyz);
/*
** ===================================================================
**     Method      :  MAG1_GetXYZ8 (component MAG3110)
**     Description :
**         Returns in an array the x, y and z sensor values as 8bit
**         values. Note that for this method the FAST_READ flag *shall*
**         be set.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * xyz             - Pointer to an array of three signed 8bit
**                           values which are used to return the
**                           accelerometer values.
**     Returns     :
**         ---             - Error code, ERR_OK for no error.
** ===================================================================
*/

byte MAG1_GetFastReadMode(bool *isOn);
/*
** ===================================================================
**     Method      :  MAG1_GetFastReadMode (component MAG3110)
**     Description :
**         Returns the FR (Fast Read Mode) status in the CTRL_REG_1
**         register
**     Parameters  :
**         NAME            - DESCRIPTION
**       * isOn            - Pointer to where to store the status of
**                           the FR bit
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte MAG1_MagneticSensorReset(void);
/*
** ===================================================================
**     Method      :  MAG1_MagneticSensorReset (component MAG3110)
**     Description :
**         Initiates a magnetic sensor reset cycle that will restore
**         correct operation after exposure to an excessive magnetic
**         field which exceeds the Full Scale Range but is less than
**         the Maximum Applied Magnetic Field.
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* END MAG1. */

#endif
/* ifndef __MAG1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
